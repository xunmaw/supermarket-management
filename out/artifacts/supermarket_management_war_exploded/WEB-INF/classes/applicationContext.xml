<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--扫描组件，加载到Ioc容器-->
    <context:component-scan base-package="com.xunmaw.supermarket.pojo,com.xunmaw.supermarket.service"/>
    <bean id="log" class="com.xunmaw.supermarket.aop.ServiceLogger"/>
    <!--数据库连接池配置-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <!--spring对mybatis的整合-->
    <!--sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="pooledDataSource"/>
        <!--dao层接口的mapper映射文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>
    <!--扫描dao接口，将dao层中接口的实现装入Ioc容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xunmaw.supermarket.dao"/>
    </bean>
    <aop:aspectj-autoproxy  proxy-target-class="true"/>
    <!--定义事务管理器组件-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="txManager"  proxy-target-class="true"/>

    <!-- <aop:config>
         <aop:pointcut id="pointcut" expression="execution(* com.edu.service..*(..))"/>
     <aop:aspect ref="log">
         <aop:before method="before" pointcut-ref="pointcut"/>
         <aop:after-returning method="afterReturning" returning="returnValue" pointcut-ref="pointcut"/>
     </aop:aspect>
     </aop:config>-->

    <!--    &lt;!&ndash;配置事务增强，设定事务的属性，为不同的业务方法指定具体的事务规则&ndash;&gt;-->
    <!--    <tx:advice id="txAdvice" transaction-manager="txManager">-->
    <!--        &lt;!&ndash;定制事务属性&ndash;&gt;-->
    <!--        <tx:attributes>-->
    <!--            &lt;!&ndash;propagation事务传播机制&ndash;&gt;-->
    <!--            &lt;!&ndash;SUPPORTS:表示如果存在一个事务，则支持当前事务；如果当前没有事务，则按非事务方式执行&ndash;&gt;-->
    <!--            <tx:method name="find*" propagation="SUPPORTS" />-->
    <!--            &lt;!&ndash;REQUIRED:默认值，表示如果存在一个事务，则支持当前事务；如果当前没有事务，则开启一个新的事务&ndash;&gt;-->
    <!--            <tx:method name="add*" propagation="REQUIRED" />-->
    <!--            <tx:method name="del*" propagation="REQUIRED" />-->
    <!--            <tx:method name="update*" propagation="REQUIRED" />-->
    <!--            <tx:method name="*" propagation="REQUIRED" />-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->
</beans>